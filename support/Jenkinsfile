// Jenkins multi-branch pipeline build script. 
// This script depends on file $HOME/vcd_connection with valid vCD 
// connection parameters. 

def credentialsArray = []
def environmentArray = []

// Pipeline definition.
pipeline {
    agent { 
        node { 
            // Label on Jenkins node that runs this test. 
            label 'docker'
        }
    }
    environment {
        DEFAULT_VCD_CONNECTION_CREDENTIALS_ID = 'pyvcloud_vcd_connection'
        PYTHON3_IN_DOCKER = '1'
    }
    parameters {
        string(name: 'VCD_CONNECTION_CREDENTIALS_ID', defaultValue: 'Default')
        string(name: 'OVERRIDE_GIT_REPOSITORY', defaultValue: '')
        string(name: 'OVERRIDE_GIT_TREEISH', defaultValue: '')
        string(name: 'OVERRIDE_GIT_CREDENTIALS_ID', defaultValue: '')
    }
    stages {
        stage('checkout') {
            steps {
                // Remove and checkout current branch from git using built-in
                // Jenkins commands exposed in groovy. 
                deleteDir()

                script {
                    def overrideGit = false
                    if (params.OVERRIDE_GIT_REPOSITORY != null) {
                        if (params.OVERRIDE_GIT_REPOSITORY != '') {
                            overrideGit = true
                        }
                    }

                    if (overrideGit == false) {
                        checkout scm
                    } else {
                        def gitTreeish = params.OVERRIDE_GIT_TREEISH
                        def gitRemoteConfig = [:]
                        gitRemoteConfig['url'] = params.OVERRIDE_GIT_REPOSITORY

                        if (params.OVERRIDE_GIT_CREDENTIALS_ID != '') {
                            gitRemoteConfig['credentialsId'] = params.OVERRIDE_GIT_CREDENTIALS_ID
                        }
                        
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: gitTreeish]],
                            userRemoteConfigs: [gitRemoteConfig]
                        ])
                    }

                    // Print configuration for later debugging. 
                    sh "git config --list"
                    sh "git branch"

                    def vcdConnectionCredentialsID = params.VCD_CONNECTION_CREDENTIALS_ID
                    if (vcdConnectionCredentialsID.toLowerCase() == 'default') {
                        vcdConnectionCredentialsID = env.DEFAULT_VCD_CONNECTION_CREDENTIALS_ID
                    }

                    if (vcdConnectionCredentialsID.toLowerCase() != "") {
                        credentialsArray << [
                            $class: 'FileBinding', 
                            credentialsId: vcdConnectionCredentialsID,
                            variable: 'VCD_CONNECTION'
                        ]
                    }
                }
            }
        }
        stage('install') {
            steps {
                // Set up Python virtual environment and install pyvcloud. 
                sh "support/install.sh"
            }
        }
        stage('run-tox-flake8') {
            steps {
        		// Run tox. 
                sh "support/tox.sh"
            }
        }
        stage('run-samples') {
            steps {
                script {
                    withCredentials(credentialsArray) {
                        // Execute samples. 
                        sh "examples/run_examples.sh"
                    }
                }
            }
        }
        stage('run-system-test') {
            steps {
                script {
                    withCredentials(credentialsArray) {
                        // Run the default system test list. 
                        sh "system_tests/run_system_tests.sh"
                    }
                }
            }
        }
    }
    post { 
        failure { 
            echo "Job failed! System test environment will not be cleared."
        }
        success { 
            echo "Job succeeded! Cleaning up system test environment"
            sh """
                set +x
                . test-env/bin/activate
                cd system_tests
                ./run_system_tests.sh cleanup_test.py
            """
        }
    }
}
